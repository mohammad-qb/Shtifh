generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  password  String
  full_name String
  role      Role   @default(ADMIN)
}

model Customer {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  image_url    String?
  user         User           @relation(fields: [userId], references: [id])
  cars         Car[]
  orders       Order[]
  userId       String         @unique @db.ObjectId
  Notification Notification[]
  privateOrder privateOrder[]
}

model CarBrand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  image_url String?
  name_en   String
  name_he   String
  name_ar   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  Car       Car[]
}

model Car {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  city         City           @relation(fields: [cityId], references: [id])
  brand        CarBrand       @relation(fields: [carBrandId], references: [id])
  plate        String?
  model        CarModel       @relation(fields: [carModelId], references: [id])
  year         Int            @default(2010)
  color        CarColor       @default(BLACK)
  customer     Customer       @relation(fields: [customerId], references: [id])
  orders       Order[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  customerId   String         @db.ObjectId
  carModelId   String         @db.ObjectId
  cityId       String         @db.ObjectId
  carBrandId   String         @db.ObjectId
  privateOrder privateOrder[]
}

model Employee {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  position     String
  salary       Float
  color        String
  start_date   String
  user         User           @relation(fields: [userId], references: [id])
  order        Order[]
  userId       String         @unique @db.ObjectId
  privateOrder privateOrder[]
}

model CarModel {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  image_url  String
  name_ar    String
  name_en    String
  name_he    String
  CarService CarService[]
  Car        Car[]
}

model City {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  active                 Boolean?                 @default(true)
  name_ar                String
  name_en                String
  name_he                String
  car_services           CarService[]
  Order                  Order[]
  Car                    Car[]
  MonthlySchedule        MonthlySchedule[]
  weekend                weekend[]
  UnavailableSlot        UnavailableSlot[]
  GlobalSchedule         GlobalSchedule[]
  RecurringDailySchedule RecurringDailySchedule[]
  DailySchedule          DailySchedule[]
  privateOrder           privateOrder[]
}

model CarService {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  book_rate          Int[]             @default([1, 1])
  car_model          CarModel          @relation(fields: [carModelId], references: [id])
  car_model_services CarModelService[]
  active             Boolean           @default(true)
  City               City?             @relation(fields: [cityId], references: [id])
  cityId             String?           @db.ObjectId
  carModelId         String            @db.ObjectId
}

model CarModelService {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  fees         Float
  service      Service     @relation(fields: [serviceId], references: [id])
  car_service  CarService? @relation(fields: [carServiceId], references: [id])
  Order        Order[]
  carServiceId String?     @db.ObjectId
  serviceId    String      @db.ObjectId
}

model Order {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  ref_number        String
  is_done           Boolean         @default(false)
  date              String
  time              String
  address           String
  fees              Float
  tip               Int             @default(0)
  lat_lng           String[]
  note              String?
  paid              Boolean?        @default(false)
  is_canceled       Boolean?        @default(false)
  type              orderType       @default(ORDER)
  city              City            @relation(fields: [cityId], references: [id])
  car               Car             @relation(fields: [carId], references: [id])
  customer          Customer        @relation(fields: [customerId], references: [id])
  employee          Employee?       @relation(fields: [employeeId], references: [id])
  service           CarModelService @relation(fields: [carModelServiceId], references: [id])
  Payment           Payment[]
  accessories       Accessories[]   @relation(fields: [accessoriesIds], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  carId             String          @db.ObjectId
  customerId        String          @db.ObjectId
  employeeId        String?         @db.ObjectId
  carModelServiceId String          @db.ObjectId
  cityId            String          @db.ObjectId
  accessoriesIds    String[]        @db.ObjectId
}

model Service {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name_ar         String
  name_en         String
  name_he         String
  CarModelService CarModelService[]
}

model PrivateService {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  image_url    String
  name_ar      String
  name_en      String
  name_he      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt()
  privateOrder privateOrder[]
}

model Accessories {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  image_url String
  price     Float
  name_ar   String
  name_en   String
  name_he   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  orders    Order[]  @relation(fields: [ordersIds], references: [id])
  ordersIds String[] @db.ObjectId
}

model privateOrder {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  customer         Customer       @relation(fields: [customerId], references: [id])
  employee         Employee?      @relation(fields: [employeeId], references: [id])
  private_service  PrivateService @relation(fields: [privateServiceId], references: [id])
  is_done          Boolean        @default(false)
  status           OrderStatus    @default(PENDING)
  car              Car            @relation(fields: [carId], references: [id])
  city             City           @relation(fields: [cityId], references: [id])
  address          String?
  date             String?
  time             String?
  lat_lng          String[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt()
  customerId       String         @db.ObjectId
  employeeId       String?        @db.ObjectId
  privateServiceId String         @db.ObjectId
  carId            String         @db.ObjectId
  cityId           String         @db.ObjectId
}

model User {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  full_name           String
  email               String    @unique
  mobile              String
  password            String
  reset_password_code String?
  role                Role      @default(CUSTOMER)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  customer            Customer?
  employee            Employee?
}

model BookedSlots {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  date             DateTime
  time             String
  requsts_limt     Int
  current_requests Int
}

model UnavailableSlot {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime
  start_time String
  end_time   String
  city       City     @relation(fields: [cityId], references: [id])
  cityId     String   @db.ObjectId
}

model DailySchedule {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  date             DateTime
  start_time       String
  end_time         String
  requests_in_hour Int
  is_off           Boolean  @default(false)
  city             City     @relation(fields: [cityId], references: [id])
  cityId           String   @db.ObjectId
}

model RecurringDailySchedule {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  day              Day
  start_time       String
  end_time         String
  requests_in_hour Int
  is_off           Boolean @default(false)
  city             City    @relation(fields: [cityId], references: [id])
  cityId           String  @db.ObjectId
}

model GlobalSchedule {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  start_time       String
  end_time         String
  requests_in_hour Int
  city             City   @relation(fields: [cityId], references: [id])
  cityId           String @db.ObjectId
}

model MonthlySchedule {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  month            Int
  year             Int
  start_time       String
  end_time         String
  requests_in_hour Int
  city             City   @relation(fields: [cityId], references: [id])
  cityId           String @db.ObjectId
}

model weekend {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  city   City   @relation(fields: [cityId], references: [id])
  day    Day
  cityId String @db.ObjectId
}

model Payment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  uniq_id   String
  fees      Float
  status    PaymentStatus @default(PENDING)
  order     Order         @relation(fields: [orderId], references: [id])
  createAt  DateTime      @default(now())
  updatedAt DateTime      @updatedAt()
  orderId   String        @db.ObjectId

  @@index([uniq_id])
}

model Notification {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  content_en String
  content_ar String
  content_he String
  for_all    Boolean          @default(false)
  type       NotifivationType @default(DEFAULT)
  customer   Customer?        @relation(fields: [customerId], references: [id])
  is_read    String[]         @db.ObjectId
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt()
  customerId String?          @db.ObjectId
}

enum CarServiceModel {
  PRIVATE
}

enum NotifivationType {
  DEFAULT
  ADMIN
  REMINDER
}

enum PaymentStatus {
  PENDING
  FAILED
  SUCCESS
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DECLINED
  DONE
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum Role {
  CUSTOMER
  EMPLOYEE
  ADMIN
}

enum CarColor {
  BLACK
  WHITE
  GRAY
  SILVER
  RED
  ORANGE
  YELLOW
  BROWN
  PURPLE
  GOLD
  GREEN
  BLUE
  OTHER
}

enum CarType {
  SEDAN
  JEEP
}

enum orderType {
  ORDER
  BOOK_LATER
}

enum CarBodyType {
  SEDAN
  JEEP
}
